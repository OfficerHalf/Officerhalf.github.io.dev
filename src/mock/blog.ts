export const postBody = `<p>More than a year ago, I wrote a blog post describing a React hook that highlighted code using <a href=\"https://prismjs.com/index.html\" rel=\"follow\">Prism</a>, a JavaScript code highlighting library. I've implemented the same feature now using Angular, here's how.</p>\r\n<h2>The Code</h2>\r\n<p>The setup is pretty simple - wrap prism in an injectable service and highlight. First, the highlighting service:</p>\r\n<p><code>code-highlight.service.ts</code></p>\r\n<pre class=\"language-typescript\"><code>import { Injectable } from '@angular/core';\r\nimport * as Prism from 'prismjs';\r\n\r\n// Languages\r\nimport 'prismjs/components/prism-typescript';\r\nimport 'prismjs/components/prism-jsx';\r\nimport 'prismjs/components/prism-tsx';\r\n\r\n// Plugins\r\nimport 'prismjs/plugins/line-numbers/prism-line-numbers';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CodeHighlightService {\r\n  highlightAllUnder(element: HTMLElement) {\r\n    Prism.highlightAllUnder(element);\r\n  }\r\n}\r\n</code></pre>\r\n<p>We'll also need to load the CSS for your chosen theme and any plugins. I <a href=\"https://github.com/OfficerHalf/alloy-theme/tree/master/themes/prismjs\" rel=\"follow\">have my own theme</a>, which includes styles for the line numbers plugin. We can load these files a number of ways but I chose to add them to my angular.json file:</p>\r\n<p><code>angular.json</code></p>\r\n<pre class=\"language-json\"><code>{\r\n  \"projects\": {\r\n    \"your-project\": {\r\n      \"architect\": {\r\n        \"build\": {\r\n          \"options\": {\r\n            \"styles\": [\"src/styles.scss\", \"src/prismjs-alloy.css\"]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}</code></pre>\r\n<p>Then we just need to highlight the code at the right time. Here's a truncated version of my blog post component:</p>\r\n<p><code>blog-post.component.ts</code></p>\r\n<pre class=\"language-typescript\"><code>import {\r\n  Component,\r\n  OnDestroy,\r\n  AfterViewInit,\r\n  ViewChild,\r\n  ElementRef\r\n} from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { CodeHighlightService } from 'src/shared/services/code-highlight.service';\r\nimport { BlogPost } from '../../interfaces/blog.interface';\r\nimport { BlogService } from '../../services/blog.service';\r\n\r\n@Component({\r\n  selector: 'app-blog-post',\r\n  templateUrl: './blog-post.component.html',\r\n  styleUrls: ['./blog-post.component.scss'],\r\n})\r\nexport class BlogPostComponent implements OnDestroy, AfterViewInit {\r\n  readonly blogPost = new BehaviorSubject&lt;BlogPost | null&gt;(null);\r\n  private readonly destroy = new Subject();\r\n\r\n  // We'll highlight everything under this element. Add any prism plugin classes to it as well if you'd like.\r\n  @ViewChild('postBody') postBodyElement!: ElementRef&lt;HTMLDivElement&gt;;\r\n  constructor(\r\n    private readonly activatedRoute: ActivatedRoute,\r\n    private readonly blogService: BlogService,\r\n    private readonly codeHighlightService: CodeHighlightService\r\n  ) {\r\n    // Load the correct blog post based on current route\r\n    this.activatedRoute.paramMap\r\n      .pipe(takeUntil(this.destroy))\r\n      .subscribe(params =&gt; {\r\n        const slug = params.get('slug');\r\n        if (slug) {\r\n          // Get blog post from blog service\r\n          const post = this.blogService.getPost(slug);\r\n          if (post) {\r\n            this.blogPost.next(post.data);\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.blogPost.pipe(takeUntil(this.destroy)).subscribe(() =&gt; {\r\n      if (this.postBodyElement) {\r\n        this.codeHighlightService.highlightAllUnder(\r\n          this.postBodyElement.nativeElement\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy.next();\r\n    this.destroy.complete();\r\n  }\r\n}\r\n</code></pre>\r\n<p>In the template, I have <code>&lt;div [innerHTML]=\"post!.body\" #postBody&gt;&lt;/div&gt;</code>.</p>\r\n<p>And that's it. Even if the content being highlighted changed, the new content would be highlighted as well.</p>`;
export const postList = [
  { body: postBody, title: 'Mock Post 1', slug: 'mock-post-1' },
  { body: postBody, title: 'Mock Post 2', slug: 'mock-post-2' },
  { body: postBody, title: 'Mock Post 3', slug: 'mock-post-3' }
];
