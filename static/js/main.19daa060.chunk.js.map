{"version":3,"sources":["util/cms.ts","util/theme.ts","util/routes.ts","components/Typography/Body.tsx","components/Typography/Headline.tsx","components/Typography/Leading.tsx","components/Typography/Small.tsx","components/Typography/Subheading.tsx","components/Typography/Title.tsx","components/Icons/Tag.tsx","components/Blog/PostList.tsx","components/RootComponents/HomePage.tsx","components/RootComponents/AboutPage.tsx","components/Navigation/Header.tsx","components/MetaComponents/Layout.tsx","components/RootComponents/ContactPage.tsx","hooks/usePrismjs.tsx","components/Blog/Post.tsx","components/Blog/Category.tsx","components/Blog/Tag.tsx","components/MetaComponents/App.tsx","serviceWorker.ts","index.tsx"],"names":["ButterApi","butter","postList","options","post","list","getPost","slug","retrieve","parsePostDate","date","Date","toLocaleString","undefined","year","month","day","hour","hour12","minute","theme","color","primary","accent","text","mutedText","lightGray","background","space","xxs","xs","s","sm","m","l","xl","xxl","xxxl","typography","fontFamily","baseFontSize","body","size","weight","lineHeight","small","leading","headline","baseLineHeight","subheading","title","googleFonts","name","styles","routes","base","template","link","category","tag","Body","React","forwardRef","props","ref","muted","className","rest","cx","children","Small","css","Subheading","Title","Tag","xmlSpace","viewBox","d","postCardStyle","postFeatureStyle","titleStyle","dateStyle","tagStyle","PostList","posts","map","p","categories","length","key","to","published","Fragment","featured_image","alt","src","summary","tags","t","HomePage","useState","setPosts","useEffect","a","response","data","fetch","style","height","AboutPage","headerStyles","Header","layoutGlobal","Layout","Helmet","contactStyle","ContactPage","require","wrapperStyle","bodyStyle","nextPrevStyle","Post","setPost","meta","setMeta","useParams","bodyRef","useRef","target","plugins","current","classList","add","Prismjs","highlightAllUnder","usePrismjs","resp","dangerouslySetInnerHTML","__html","previous_post","next_post","Category","category_slug","tag_slug","globalStyles","App","path","element","Boolean","window","location","hostname","match","root","document","getElementById","app","StrictMode","hasChildNodes","ReactDOM","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.19daa060.chunk.js","sourcesContent":["import butter from 'buttercms';\r\nimport { AxiosResponse } from 'axios';\r\nimport {\r\n  ButterListResponse,\r\n  BlogPost,\r\n  ButterRetrieveResponse,\r\n  ButterListOptions\r\n} from '../types/cms';\r\n\r\nconst ButterApi = butter('9ffd3dad4fd54423ad22bc3ce3e1a2fd6bbc9081');\r\n\r\nexport function postList(\r\n  options?: ButterListOptions\r\n): Promise<AxiosResponse<ButterListResponse<BlogPost[]>>> {\r\n  return ButterApi.post.list(options) as Promise<\r\n    AxiosResponse<ButterListResponse<BlogPost[]>>\r\n  >;\r\n}\r\n\r\nexport function getPost(\r\n  slug: string\r\n): Promise<AxiosResponse<ButterRetrieveResponse>> {\r\n  return ButterApi.post.retrieve(slug) as Promise<\r\n    AxiosResponse<ButterRetrieveResponse>\r\n  >;\r\n}\r\n\r\nexport function parsePostDate(date: string): string {\r\n  return new Date(date).toLocaleString(undefined, {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n    hour: 'numeric',\r\n    hour12: true,\r\n    minute: 'numeric'\r\n  });\r\n}\r\n","import { Theme } from '../types/theme';\r\n\r\nconst baseLineHeight = 1.61;\r\n\r\nexport const theme: Theme = {\r\n  color: {\r\n    primary: '#377771',\r\n    accent: '#4CE0B3',\r\n    text: '#333',\r\n    mutedText: '#707070',\r\n    lightGray: '#999',\r\n    background: '#e7ecef'\r\n  },\r\n  space: {\r\n    xxs: '2px',\r\n    xs: '4px',\r\n    s: '8px',\r\n    sm: '12px',\r\n    m: '16px',\r\n    l: '24px',\r\n    xl: '32px',\r\n    xxl: '64px',\r\n    xxxl: '96px'\r\n  },\r\n  typography: {\r\n    fontFamily: 'Lato, sans-serif',\r\n    baseFontSize: '16px',\r\n    body: {\r\n      size: '1em',\r\n      weight: '400',\r\n      lineHeight: baseLineHeight\r\n    },\r\n    small: {\r\n      size: '0.8em',\r\n      weight: '400',\r\n      lineHeight: baseLineHeight\r\n    },\r\n    leading: {\r\n      size: '1.15em',\r\n      weight: '400',\r\n      lineHeight: baseLineHeight\r\n    },\r\n    headline: {\r\n      size: '2em',\r\n      weight: '300',\r\n      lineHeight: baseLineHeight * 2\r\n    },\r\n    subheading: {\r\n      size: '1.3em',\r\n      weight: '400',\r\n      lineHeight: baseLineHeight * 1.5\r\n    },\r\n    title: {\r\n      size: '1.5em',\r\n      weight: '300',\r\n      lineHeight: baseLineHeight * 1.5\r\n    },\r\n    googleFonts: [\r\n      {\r\n        name: 'Lato',\r\n        styles: ['300', '400', '700']\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\n// baseFontSize: '18px',\r\n//     headerFontFamily: 'Lato, sans-serif',\r\n//     bodyFontFamily: 'Lato, sans-serif',\r\n\r\nexport default theme;\r\n","export const routes = {\r\n  about: 'about',\r\n  contact: 'contact',\r\n  blog: {\r\n    base: 'blog',\r\n    post: {\r\n      template: 'post/:slug',\r\n      link: (slug: string) => `/blog/post/${slug}`\r\n    },\r\n    category: {\r\n      template: 'category/:slug',\r\n      link: (slug: string) => `/blog/category/${slug}`\r\n    },\r\n    tag: {\r\n      template: 'tag/:slug',\r\n      link: (slug: string) => `/blog/tag/${slug}`\r\n    }\r\n  }\r\n};\r\n","import React from 'react';\r\nimport cx from 'classnames';\r\n\r\ntype BodyProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLParagraphElement>,\r\n  HTMLParagraphElement\r\n> & {\r\n  muted?: boolean;\r\n};\r\n\r\nexport const Body = React.forwardRef<HTMLParagraphElement, BodyProps>(\r\n  (props, ref) => {\r\n    const { muted = false, className, ...rest } = props;\r\n    return <p ref={ref} className={cx({ muted }, className)} {...rest}></p>;\r\n  }\r\n);\r\n","import React from 'react';\r\nimport cx from 'classnames';\r\n\r\ntype HeadlineProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLHeadingElement>,\r\n  HTMLHeadingElement\r\n> & {\r\n  muted?: boolean;\r\n};\r\n\r\nexport const Headline = React.forwardRef<HTMLHeadingElement, HeadlineProps>(\r\n  (props, ref) => {\r\n    const { muted = false, className, children, ...rest } = props;\r\n    return (\r\n      <h1 ref={ref} className={cx({ muted }, className)} {...rest}>\r\n        {children}\r\n      </h1>\r\n    );\r\n  }\r\n);\r\n","import React from 'react';\r\nimport cx from 'classnames';\r\n\r\ntype LeadingProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLHeadingElement>,\r\n  HTMLHeadingElement\r\n> & {\r\n  muted?: boolean;\r\n};\r\n\r\nexport const Leading = React.forwardRef<HTMLHeadingElement, LeadingProps>(\r\n  (props, ref) => {\r\n    const { muted = false, className, children, ...rest } = props;\r\n    return (\r\n      <h4 ref={ref} className={cx({ muted }, className)} {...rest}>\r\n        {children}\r\n      </h4>\r\n    );\r\n  }\r\n);\r\n","/** @jsx jsx */\r\nimport React from 'react';\r\nimport cx from 'classnames';\r\nimport { jsx, css } from '@emotion/core';\r\nimport theme from '../../util/theme';\r\n\r\nconst { typography } = theme;\r\n\r\ntype SmallProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLParagraphElement>,\r\n  HTMLParagraphElement\r\n> & {\r\n  muted?: boolean;\r\n};\r\n\r\nexport const Small = React.forwardRef<HTMLParagraphElement, SmallProps>(\r\n  (props, ref) => {\r\n    const { muted = false, className, ...rest } = props;\r\n    return (\r\n      <p\r\n        css={css`\r\n          font-size: ${typography.small.size};\r\n          font-weight: ${typography.small.weight};\r\n        `}\r\n        ref={ref}\r\n        className={cx({ muted }, className)}\r\n        {...rest}></p>\r\n    );\r\n  }\r\n);\r\n","import React from 'react';\r\nimport cx from 'classnames';\r\n\r\ntype SubheadingProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLHeadingElement>,\r\n  HTMLHeadingElement\r\n> & {\r\n  muted?: boolean;\r\n};\r\n\r\nexport const Subheading = React.forwardRef<HTMLHeadingElement, SubheadingProps>(\r\n  (props, ref) => {\r\n    const { muted = false, className, children, ...rest } = props;\r\n    return (\r\n      <h3 ref={ref} className={cx({ muted }, className)} {...rest}>\r\n        {children}\r\n      </h3>\r\n    );\r\n  }\r\n);\r\n","import React from 'react';\r\nimport cx from 'classnames';\r\n\r\ntype TitleProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLHeadingElement>,\r\n  HTMLHeadingElement\r\n> & {\r\n  muted?: boolean;\r\n};\r\n\r\nexport const Title = React.forwardRef<HTMLHeadingElement, TitleProps>(\r\n  (props, ref) => {\r\n    const { muted = false, className, children, ...rest } = props;\r\n    return (\r\n      <h2 ref={ref} className={cx({ muted }, className)} {...rest}>\r\n        {children}\r\n      </h2>\r\n    );\r\n  }\r\n);\r\n","import React from 'react';\r\n\r\nexport const Tag: React.FC<React.SVGProps<SVGSVGElement>> = props => (\r\n  <svg xmlSpace=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" {...props}>\r\n    <path d=\"M0 10V2l2-2h8l10 10-10 10L0 10zm4.5-4a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z\" />\r\n  </svg>\r\n);\r\n","/** @jsx jsx */\r\nimport React from 'react';\r\nimport { BlogPost } from '../../types/cms';\r\nimport { Link } from 'react-router-dom';\r\nimport { parsePostDate } from '../../util/cms';\r\nimport { jsx, css } from '@emotion/core';\r\nimport theme from '../../util/theme';\r\nimport { routes } from '../../util/routes';\r\nimport { Body, Small, Subheading } from '../Typography';\r\nimport { Tag } from '../Icons/Tag';\r\n\r\nconst { space, color } = theme;\r\n\r\nconst postCardStyle = css`\r\n  max-width: 700px;\r\n  margin: ${space.m};\r\n  padding: ${space.s};\r\n  background-color: white;\r\n`;\r\n\r\nconst postFeatureStyle = css`\r\n  display: flex;\r\n  align-items: center;\r\n  img {\r\n    max-width: 200px;\r\n    max-height: 150px;\r\n    margin-right: ${space.s};\r\n  }\r\n`;\r\n\r\nconst titleStyle = css`\r\n  display: block;\r\n  margin: 0 0 ${space.xs} 0;\r\n  text-decoration: none;\r\n  &,\r\n  &:focus,\r\n  &:visited,\r\n  &:active {\r\n    color: ${color.primary};\r\n  }\r\n`;\r\n\r\nconst dateStyle = css`\r\n  margin-bottom: ${space.sm};\r\n`;\r\n\r\nconst tagStyle = css`\r\n  display: flex;\r\n  margin-top: ${space.s};\r\n  .tag-icon {\r\n    width: ${space.m};\r\n    height: ${space.m};\r\n    fill: ${color.lightGray};\r\n  }\r\n  .tag-link {\r\n    color: ${color.mutedText};\r\n    text-decoration: none;\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n    &:not(:last-child) {\r\n      margin-right: ${space.xs};\r\n    }\r\n    &:not(:first-child) {\r\n      margin-left: ${space.xs};\r\n    }\r\n  }\r\n`;\r\n\r\ninterface PostListProps {\r\n  posts: BlogPost[];\r\n}\r\n\r\nexport const PostList: React.FC<PostListProps> = props => {\r\n  const { posts } = props;\r\n  return (\r\n    <div>\r\n      {posts.map(p => {\r\n        const category =\r\n          p.categories && p.categories.length > 0 ? p.categories[0] : null;\r\n        return (\r\n          <div key={p.slug} css={postCardStyle}>\r\n            <Link css={titleStyle} to={routes.blog.post.link(p.slug)}>\r\n              <Subheading>{p.title}</Subheading>\r\n            </Link>\r\n            <div\r\n              css={css`\r\n                display: flex;\r\n              `}>\r\n              <Small css={dateStyle}>{parsePostDate(p.published)}</Small>\r\n              {category && (\r\n                <React.Fragment>\r\n                  <Small>&mdash;</Small>\r\n                  <Link to={routes.blog.category.link(category.slug)}>\r\n                    <Small>{category.name}</Small>\r\n                  </Link>\r\n                </React.Fragment>\r\n              )}\r\n            </div>\r\n            <div css={postFeatureStyle}>\r\n              {p.featured_image && p.featured_image !== '' && (\r\n                <img alt=\"featured\" src={p.featured_image} />\r\n              )}\r\n              <Body>{p.summary}</Body>\r\n            </div>\r\n            {p.tags.length > 0 && (\r\n              <div css={tagStyle}>\r\n                <Tag className=\"tag-icon\" />\r\n                {p.tags.map(t => (\r\n                  <Link\r\n                    className=\"tag-link\"\r\n                    key={t.slug}\r\n                    to={routes.blog.tag.link(t.slug)}>\r\n                    <Small>{t.name}</Small>\r\n                  </Link>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","/** @jsx jsx */\r\nimport React from 'react';\r\nimport { postList } from '../../util/cms';\r\nimport { BlogPost } from '../../types/cms';\r\nimport { Post } from '../Blog/Post';\r\nimport { css, jsx } from '@emotion/core';\r\nimport theme from '../../util/theme';\r\nimport { PostList } from '../Blog/PostList';\r\n\r\nexport const HomePage: React.FC = props => {\r\n  const [posts, setPosts] = React.useState<BlogPost[]>([]);\r\n\r\n  React.useEffect(() => {\r\n    const fetch = async () => {\r\n      const response = await postList();\r\n      setPosts(response.data.data);\r\n    };\r\n    fetch();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ height: '100%' }}>\r\n      <PostList posts={posts} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const AboutPage: React.FC = props => {\r\n  return (\r\n    <div>\r\n      <p>\r\n        Nathan Smith is an Associate Software Developer at Bentley Systems where\r\n        he writes full-stack enterprise ASP.NET Core and TypeScript + React web\r\n        applications and maintains a CSS + React UI library. In his spare time\r\n        he plays tabletop and video games and takes pictures of his cats.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { theme } from '../../util/theme';\r\nimport { Link } from 'react-router-dom';\r\nimport { Title } from '../Typography';\r\n\r\nconst { color, space } = theme;\r\n\r\nconst headerStyles = css`\r\n  background-color: ${color.primary};\r\n  color: white;\r\n  padding: ${space.m};\r\n  ul {\r\n    display: flex;\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    li {\r\n      display: block;\r\n      margin: 0 ${space.sm};\r\n      cursor: pointer;\r\n      &:first-child {\r\n        margin-left: 0;\r\n      }\r\n      &:last-child {\r\n        margin-right: 0;\r\n      }\r\n\r\n      &.spacer {\r\n        cursor: initial;\r\n        flex-grow: 1;\r\n      }\r\n      a {\r\n        text-decoration: none;\r\n        &,\r\n        &:active,\r\n        &:hover,\r\n        &:visited {\r\n          color: white;\r\n        }\r\n        &:hover {\r\n          text-decoration: underline;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Header: React.FC = props => {\r\n  return (\r\n    <header css={headerStyles}>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">\r\n            <Title>Nathan Smith</Title>\r\n          </Link>\r\n        </li>\r\n        <li className=\"spacer\" />\r\n        <li>\r\n          <Link to=\"/about\">\r\n            <Title>About</Title>\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/contact\">\r\n            <Title>Contact</Title>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </header>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Outlet } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Header } from '../Navigation/Header';\r\nimport { css, Global } from '@emotion/core';\r\nimport theme from '../../util/theme';\r\n\r\nconst { color } = theme;\r\n\r\nconst layoutGlobal = css`\r\n  body {\r\n    background-color: ${color.background};\r\n  }\r\n`;\r\n\r\nexport const Layout: React.FC = props => {\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Nathan Smith</title>\r\n      </Helmet>\r\n      <Global styles={layoutGlobal} />\r\n      <Header />\r\n      <Outlet />\r\n    </div>\r\n  );\r\n};\r\n","/** @jsx jsx */\r\nimport React from 'react';\r\nimport { jsx, css } from '@emotion/core';\r\n\r\nconst contactStyle = css`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 550px;\r\n  height: 800px;\r\n\r\n  iframe {\r\n    border: 0;\r\n    width: 550px;\r\n    height: 800px;\r\n  }\r\n`;\r\n\r\nexport const ContactPage: React.FC = props => {\r\n  return (\r\n    <div css={contactStyle}>\r\n      <iframe\r\n        title=\"Contact Me\"\r\n        src=\"https://docs.google.com/forms/d/e/1FAIpQLScLKJVojwvtY0TpBPYfaUQEhKjQfa2iAZsitp3iRxkEoAYvmw/viewform?embedded=true\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport Prismjs from 'prismjs';\r\n\r\nimport '../util/prismjs-alloy.scss';\r\nimport 'prismjs/plugins/line-numbers/prism-line-numbers.css';\r\n\r\nrequire('prismjs/components/prism-typescript');\r\nrequire('prismjs/components/prism-jsx');\r\nrequire('prismjs/components/prism-tsx');\r\nrequire('prismjs/plugins/line-numbers/prism-line-numbers');\r\n\r\nexport function usePrismjs<T extends HTMLElement>(\r\n  target: React.RefObject<T>,\r\n  plugins: string[] = []\r\n) {\r\n  React.useEffect(() => {\r\n    if (target.current) {\r\n      if (plugins.length > 0) {\r\n        target.current.classList.add(...plugins);\r\n      }\r\n      Prismjs.highlightAllUnder(target.current);\r\n    }\r\n  }, [target, plugins]);\r\n}\r\n","/** @jsx jsx */\r\nimport React, { Fragment } from 'react';\r\nimport { BlogPost, ButterRetrieveMeta } from '../../types/cms';\r\nimport { usePrismjs } from '../../hooks/usePrismjs';\r\nimport { useParams } from 'react-router';\r\nimport { getPost, parsePostDate } from '../../util/cms';\r\nimport { css, jsx } from '@emotion/core';\r\nimport { theme } from '../../util/theme';\r\nimport { Link } from 'react-router-dom';\r\nimport { routes } from '../../util/routes';\r\nimport { Tag } from '../Icons/Tag';\r\nimport { Small } from '../Typography';\r\n\r\nconst { space, color } = theme;\r\n\r\nconst wrapperStyle = css`\r\n  margin-top: ${space.l};\r\n  margin-bottom: ${space.m};\r\n  max-width: 900px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nconst titleStyle = css`\r\n  margin-bottom: ${space.xs};\r\n`;\r\n\r\nconst dateStyle = css`\r\n  margin-bottom: ${space.sm};\r\n`;\r\n\r\nconst bodyStyle = css`\r\n  margin-bottom: ${space.l};\r\n\r\n  p {\r\n    margin-bottom: ${space.m};\r\n    margin-top: ${space.xs};\r\n  }\r\n  h1,\r\n  h2 {\r\n    margin-bottom: ${space.xs};\r\n  }\r\n  h3,\r\n  h4 {\r\n    margin-bottom: ${space.m};\r\n  }\r\n`;\r\n\r\nconst tagStyle = css`\r\n  display: flex;\r\n  margin-bottom: ${space.xs};\r\n  .tag-icon {\r\n    width: ${space.m};\r\n    height: ${space.m};\r\n    fill: ${color.lightGray};\r\n  }\r\n  .tag-link {\r\n    color: ${color.mutedText};\r\n    text-decoration: none;\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n    &:not(:last-child) {\r\n      margin-right: ${space.xs};\r\n    }\r\n    &:not(:first-child) {\r\n      margin-left: ${space.xs};\r\n    }\r\n  }\r\n`;\r\n\r\nconst nextPrevStyle = css`\r\n  margin-bottom: ${space.xs};\r\n`;\r\n\r\nexport const Post: React.FC = props => {\r\n  const [post, setPost] = React.useState<BlogPost>();\r\n  const [meta, setMeta] = React.useState<ButterRetrieveMeta>();\r\n  const { slug } = useParams();\r\n  const bodyRef = React.useRef<HTMLDivElement>(null);\r\n  usePrismjs(bodyRef, ['line-numbers']);\r\n\r\n  const category =\r\n    post && post.categories.length > 0 ? post.categories[0] : undefined;\r\n\r\n  React.useEffect(() => {\r\n    const fetch = async () => {\r\n      const resp = await getPost(slug);\r\n      setPost(resp.data.data);\r\n      setMeta(resp.data.meta);\r\n    };\r\n    fetch();\r\n  }, [slug]);\r\n\r\n  return (\r\n    <div css={wrapperStyle}>\r\n      {post && meta && (\r\n        <Fragment>\r\n          <h1 css={titleStyle}>{post.title}</h1>\r\n          <h4 css={dateStyle}>\r\n            {parsePostDate(post.published)}\r\n            {category && (\r\n              <Fragment>\r\n                &mdash;\r\n                <Link to={routes.blog.category.link(category.slug)}>\r\n                  {category.name}\r\n                </Link>\r\n              </Fragment>\r\n            )}\r\n          </h4>\r\n          <div\r\n            css={bodyStyle}\r\n            ref={bodyRef}\r\n            dangerouslySetInnerHTML={{ __html: post.body }}\r\n          />\r\n          {post.tags.length > 0 && (\r\n            <div css={tagStyle}>\r\n              <Tag className=\"tag-icon\" />\r\n              {post.tags.map(t => (\r\n                <Link\r\n                  className=\"tag-link\"\r\n                  key={t.slug}\r\n                  to={routes.blog.tag.link(t.slug)}>\r\n                  <Small>{t.name}</Small>\r\n                </Link>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {meta.previous_post && (\r\n            <div css={nextPrevStyle}>\r\n              Previous:&nbsp;\r\n              <Link to={routes.blog.post.link(meta.previous_post.slug)}>\r\n                {meta.previous_post.title}\r\n              </Link>\r\n            </div>\r\n          )}\r\n          {meta.next_post && (\r\n            <div css={nextPrevStyle}>\r\n              Next:&nbsp;\r\n              <Link to={routes.blog.post.link(meta.next_post.slug)}>\r\n                {meta.next_post.title}\r\n              </Link>\r\n            </div>\r\n          )}\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { PostList } from './PostList';\r\nimport { useParams } from 'react-router';\r\nimport { postList } from '../../util/cms';\r\nimport { BlogPost } from '../../types/cms';\r\n\r\nexport const Category: React.FC = props => {\r\n  const [posts, setPosts] = React.useState<BlogPost[]>([]);\r\n  const { slug } = useParams();\r\n\r\n  React.useEffect(() => {\r\n    const fetch = async () => {\r\n      const response = await postList({ category_slug: slug });\r\n      setPosts(response.data.data);\r\n    };\r\n    fetch();\r\n  }, [slug]);\r\n\r\n  return (\r\n    <div>\r\n      <PostList posts={posts} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { PostList } from './PostList';\r\nimport { useParams } from 'react-router';\r\nimport { postList } from '../../util/cms';\r\nimport { BlogPost } from '../../types/cms';\r\n\r\nexport const Tag: React.FC = props => {\r\n  const [posts, setPosts] = React.useState<BlogPost[]>([]);\r\n  const { slug } = useParams();\r\n\r\n  React.useEffect(() => {\r\n    const fetch = async () => {\r\n      const response = await postList({ tag_slug: slug });\r\n      setPosts(response.data.data);\r\n    };\r\n    fetch();\r\n  }, [slug]);\r\n\r\n  return (\r\n    <div>\r\n      <PostList posts={posts} />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Global, css } from '@emotion/core';\r\nimport { HomePage } from '../RootComponents/HomePage';\r\nimport { AboutPage } from '../RootComponents/AboutPage';\r\nimport { theme } from '../../util/theme';\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nimport { Layout } from './Layout';\r\nimport { ContactPage } from '../RootComponents/ContactPage';\r\nimport { Post } from '../Blog/Post';\r\nimport { routes } from '../../util/routes';\r\nimport { Category } from '../Blog/Category';\r\nimport { Tag } from '../Blog/Tag';\r\n\r\nconst { color, typography } = theme;\r\nconst globalStyles = css`\r\n  html {\r\n    box-sizing: border-box;\r\n    color: ${color.text};\r\n    font-family: ${typography.fontFamily};\r\n    font-size: ${typography.baseFontSize};\r\n  }\r\n  /* Headline */\r\n  h1 {\r\n    font-size: ${typography.headline.size};\r\n    font-weight: ${typography.headline.weight};\r\n  }\r\n  /* Title */\r\n  h2 {\r\n    font-size: ${typography.title.size};\r\n    font-weight: ${typography.title.weight};\r\n  }\r\n  /* Subheading */\r\n  h3 {\r\n    font-size: ${typography.subheading.size};\r\n    font-weight: ${typography.subheading.weight};\r\n  }\r\n  /* Lead text */\r\n  h4 {\r\n    font-size: ${typography.leading.size};\r\n    font-weight: ${typography.leading.weight};\r\n  }\r\n  p {\r\n    font-size: ${typography.body.size};\r\n    font-weight: ${typography.body.weight};\r\n  }\r\n  h1,\r\n  h2,\r\n  h3,\r\n  h4,\r\n  p {\r\n    margin: 0;\r\n    .muted {\r\n      color: ${color.mutedText};\r\n    }\r\n  }\r\n  *,\r\n  *:before,\r\n  *:after {\r\n    box-sizing: inherit;\r\n  }\r\n`;\r\n\r\nexport const App: React.FC = props => {\r\n  return (\r\n    <>\r\n      <Global styles={globalStyles} />\r\n      <BrowserRouter>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Layout />}>\r\n            <Route path=\"/\" element={<HomePage />} />\r\n            <Route path={routes.about} element={<AboutPage />} />\r\n            <Route path={routes.contact} element={<ContactPage />} />\r\n            <Route path={routes.blog.base}>\r\n              <Route path={routes.blog.post.template} element={<Post />} />\r\n              <Route\r\n                path={routes.blog.category.template}\r\n                element={<Category />}\r\n              />\r\n              <Route path={routes.blog.tag.template} element={<Tag />} />\r\n            </Route>\r\n          </Route>\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/MetaComponents/App';\nimport { ThemeProvider } from 'emotion-theming';\nimport { theme } from './util/theme';\nimport * as serviceWorker from './serviceWorker';\nimport 'normalize.css';\n\nconst root = document.getElementById('root');\nconst app = (\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n);\nif (root!.hasChildNodes()) {\n  ReactDOM.hydrate(app, root);\n} else {\n  ReactDOM.render(app, root);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}