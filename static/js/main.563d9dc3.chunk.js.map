{"version":3,"sources":["api/Butter.ts","components/Blog/PostCard.tsx","serviceWorker.ts","index.tsx","components/RootComponents/App.tsx"],"names":["ButterApi","butter","PostCard","props","post","className","rest","postDate","Date","published","toLocaleDateString","undefined","year","month","day","cx","src","featured_image","alt","slug","href","categories","name","summary","Boolean","window","location","hostname","match","ReactDOM","render","React","posts","setPosts","list","then","resp","data","map","key","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAOMA,E,MAAYC,GAFF,4C,mCCIHC,G,MAIN,SAAAC,GAAU,IACPC,EAA6BD,EAA7BC,KAAMC,EAAuBF,EAAvBE,UAAcC,EADd,YACuBH,EADvB,sBAERI,EAAW,IAAIC,KAAKJ,EAAKK,WAAWC,wBAAmBC,EAAW,CACtEC,KAAM,UACNC,MAAO,OACPC,IAAK,YAEP,OACE,uCAASR,EAAT,CAAeD,UAAWU,IAAG,sBAAuBV,KAClD,uBAAKA,UAAU,mBACb,uBAAKW,IAAKZ,EAAKa,eAAgBC,IAAG,UAAKd,EAAKe,KAAV,sBAEpC,uBAAKd,UAAU,qBACb,uBAAKA,UAAU,sBACb,qBAAGe,KAAMhB,EAAKe,MACXf,EAAKiB,YAAcjB,EAAKiB,WAAW,GAChCjB,EAAKiB,WAAW,GAAGC,KACnB,KAGR,sBAAIjB,UAAU,mBAAd,SACA,uBAAKA,UAAU,oBAAoBE,GACnC,uBAAKF,UAAU,qBAAqBD,EAAKmB,aCvB7BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,mBCAa,SAAA3B,GAAU,IAAD,EACV4B,WAA2B,IADjB,mBAC7BC,EAD6B,KACtBC,EADsB,KAOpC,OALAF,aAAgB,WJET/B,EAAUI,KAAK8B,OIDTC,MAAK,SAAAC,GACdH,EAASG,EAAKC,KAAKA,YAIrB,gCACE,iCACCL,EAAMM,KAAI,SAAAlC,GACT,OAAO,gBAAC,EAAD,CAAUmC,IAAKnC,EAAKe,KAAMf,KAAMA,UDX/B,MAASoC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMT,MAAK,SAAAU,GACjCA,EAAaC,kB","file":"static/js/main.563d9dc3.chunk.js","sourcesContent":["import butter from \"buttercms\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport { ButterListResponse } from \"../interfaces/ButterListResponse\";\r\n\r\n// This is readonly, why are you stealing it?\r\nconst awBeans = \"9ffd3dad4fd54423ad22bc3ce3e1a2fd6bbc9081\";\r\n\r\nconst ButterApi = butter(awBeans);\r\n\r\nexport function postList(): Promise<AxiosResponse<ButterListResponse>> {\r\n  return ButterApi.post.list() as Promise<AxiosResponse<ButterListResponse>>;\r\n}\r\n","import * as React from \"react\";\r\nimport { BlogPost } from \"../../interfaces/BlogPost\";\r\nimport cx from \"classnames\";\r\nimport \"../../style/components/Blog/PostCard.scss\";\r\n\r\ninterface PostCardProps {\r\n  post: BlogPost;\r\n}\r\n\r\nexport const PostCard: React.FC<PostCardProps &\r\n  React.DetailedHTMLProps<\r\n    React.HTMLAttributes<HTMLDivElement>,\r\n    HTMLDivElement\r\n  >> = props => {\r\n  const { post, className, ...rest } = props;\r\n  const postDate = new Date(post.published).toLocaleDateString(undefined, {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\"\r\n  });\r\n  return (\r\n    <div {...rest} className={cx(\"post-card-container\", className)}>\r\n      <div className=\"post-card-image\">\r\n        <img src={post.featured_image} alt={`${post.slug}-featured-image`} />\r\n      </div>\r\n      <div className=\"post-card-content\">\r\n        <div className=\"post-card-category\">\r\n          <a href={post.slug}>\r\n            {post.categories && post.categories[0]\r\n              ? post.categories[0].name\r\n              : \"\"}\r\n          </a>\r\n        </div>\r\n        <h2 className=\"post-card-title\">title</h2>\r\n        <div className=\"post-card-byline\">{postDate}</div>\r\n        <div className=\"post-card-summary\">{post.summary}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./components/RootComponents/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"normalize.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import * as React from \"react\";\r\nimport { postList } from \"../../api/Butter\";\r\nimport \"../../style/components/RootComponents/App.scss\";\r\nimport { BlogPost } from \"../../interfaces/BlogPost\";\r\nimport { PostCard } from \"../Blog/PostCard\";\r\n\r\nexport const App: React.FC = props => {\r\n  const [posts, setPosts] = React.useState<BlogPost[]>([]);\r\n  React.useEffect(() => {\r\n    postList().then(resp => {\r\n      setPosts(resp.data.data);\r\n    });\r\n  });\r\n  return (\r\n    <>\r\n      <h1>App</h1>\r\n      {posts.map(post => {\r\n        return <PostCard key={post.slug} post={post} />;\r\n      })}\r\n    </>\r\n  );\r\n};\r\n"],"sourceRoot":""}