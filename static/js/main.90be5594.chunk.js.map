{"version":3,"sources":["components/RootComponents/HomePage.tsx","components/RootComponents/AboutPage.tsx","util/theme.ts","components/Navigation/Header.tsx","components/MetaComponents/Layout.tsx","components/MetaComponents/App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePage","props","AboutPage","theme","color","primary","accent","text","space","xxs","xs","s","sm","m","l","xl","xxl","xxxl","typography","baseFontSize","baseLineHeight","headerFontFamily","bodyFontFamily","googleFonts","name","styles","headerStyles","css","Header","to","className","Layout","Helmet","globalStyles","App","path","element","Boolean","window","location","hostname","match","root","document","getElementById","app","StrictMode","hasChildNodes","ReactDOM","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMAEaA,EAAqB,SAAAC,GAChC,OAAO,mDCDIC,EAAsB,SAAAD,GACjC,OAAO,+CCDIE,EAAe,CAC1BC,MAAO,CACLC,QAAS,UACTC,OAAQ,UACRC,KAAM,QAERC,MAAO,CACLC,IAAK,MACLC,GAAI,MACJC,EAAG,MACHC,GAAI,OACJC,EAAG,OACHC,EAAG,OACHC,GAAI,OACJC,IAAK,OACLC,KAAM,QAERC,WAAY,CACVC,aAAc,OACdC,eAAgB,KAChBC,iBAAkB,mBAClBC,eAAgB,mBAChBC,YAAa,CACX,CACEC,KAAM,OACNC,OAAQ,CAAC,MAAO,W,+uBCtBhBrB,EAAiBD,EAAjBC,MAAOI,EAAUL,EAAVK,MAETkB,EAAeC,YAAH,IACIvB,EAAMC,QAEfG,EAAMK,EAQDL,EAAMI,IA6BXgB,EAAmB,SAAA3B,GAC9B,OACE,sBAAQ0B,IAAKD,GACX,sBACE,sBACE,YAAC,IAAD,CAAMG,GAAG,KAAT,iBAEF,kBAAIC,UAAU,WACd,sBACE,YAAC,IAAD,CAAMD,GAAG,UAAT,aCnDGE,EAAmB,SAAA9B,GAC9B,OACE,6BACE,kBAAC+B,EAAA,EAAD,KACE,gDAEF,kBAAC,EAAD,MACA,kBAAC,IAAD,Q,gNCJE5B,EAAsBD,EAAtBC,MAAOc,EAAef,EAAfe,WACTe,EAAeN,YAAH,IAELvB,EAAMG,KACAW,EAAWI,eAMTJ,EAAWG,kBAKnBa,EAAgB,SAAAjC,GAC3B,OACE,oCACE,kBAAC,IAAD,CAAQwB,OAAQQ,IAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,IAAIC,QAAS,kBAAC,EAAD,OACvB,kBAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,kBAAC,EAAD,QACzB,kBAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,kBAAC,EAAD,a,QCnBrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCVAC,EAAOC,SAASC,eAAe,QAC/BC,EACJ,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAe3C,MAAOA,GACpB,kBAAC,EAAD,QAIFuC,EAAMK,gBACRC,IAASC,QAAQJ,EAAKH,GAEtBM,IAASE,OAAOL,EAAKH,GDwHjB,kBAAmBS,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90be5594.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const HomePage: React.FC = props => {\r\n  return <div>home page my dude</div>;\r\n};\r\n","import React from 'react';\r\n\r\nexport const AboutPage: React.FC = props => {\r\n  return <div>about me, duh</div>;\r\n};\r\n","import { Theme } from '../types/theme';\r\n\r\nexport const theme: Theme = {\r\n  color: {\r\n    primary: '#377771',\r\n    accent: '#4CE0B3',\r\n    text: '#333'\r\n  },\r\n  space: {\r\n    xxs: '2px',\r\n    xs: '4px',\r\n    s: '8px',\r\n    sm: '12px',\r\n    m: '16px',\r\n    l: '24px',\r\n    xl: '32px',\r\n    xxl: '64px',\r\n    xxxl: '96px'\r\n  },\r\n  typography: {\r\n    baseFontSize: '18px',\r\n    baseLineHeight: 1.61,\r\n    headerFontFamily: 'Lato, sans-serif',\r\n    bodyFontFamily: 'Lato, sans-serif',\r\n    googleFonts: [\r\n      {\r\n        name: 'Lato',\r\n        styles: ['400', '700']\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\nexport default theme;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { theme } from '../../util/theme';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst { color, space } = theme;\r\n\r\nconst headerStyles = css`\r\n  background-color: ${color.primary};\r\n  color: white;\r\n  padding: ${space.m};\r\n  ul {\r\n    display: flex;\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    li {\r\n      display: block;\r\n      margin: 0 ${space.sm};\r\n      cursor: pointer;\r\n      &:first-child {\r\n        margin-left: 0;\r\n      }\r\n      &:last-child {\r\n        margin-right: 0;\r\n      }\r\n\r\n      &.spacer {\r\n        cursor: initial;\r\n        flex-grow: 1;\r\n      }\r\n      a {\r\n        text-decoration: none;\r\n        &,\r\n        &:active,\r\n        &:hover,\r\n        &:visited {\r\n          color: white;\r\n        }\r\n        &:hover {\r\n          text-decoration: underline;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Header: React.FC = props => {\r\n  return (\r\n    <header css={headerStyles}>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Nathan Smith</Link>\r\n        </li>\r\n        <li className=\"spacer\" />\r\n        <li>\r\n          <Link to=\"/about\">About</Link>\r\n        </li>\r\n      </ul>\r\n    </header>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Outlet } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Header } from '../Navigation/Header';\r\n\r\nexport const Layout: React.FC = props => {\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Nathan Smith</title>\r\n      </Helmet>\r\n      <Header />\r\n      <Outlet />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport { Global, css } from '@emotion/core';\nimport { HomePage } from '../RootComponents/HomePage';\nimport { AboutPage } from '../RootComponents/AboutPage';\nimport { theme } from '../../util/theme';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport { Layout } from './Layout';\n\nconst { color, typography } = theme;\nconst globalStyles = css`\n  html {\n    color: ${color.text};\n    font-family: ${typography.bodyFontFamily};\n    h1,\n    h2,\n    h3,\n    h4,\n    h5 {\n      font-family: ${typography.headerFontFamily};\n    }\n  }\n`;\n\nexport const App: React.FC = props => {\n  return (\n    <>\n      <Global styles={globalStyles} />\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Layout />}>\n            <Route path=\"/\" element={<HomePage />} />\n            <Route path=\"about\" element={<AboutPage />} />\n          </Route>\n        </Routes>\n      </BrowserRouter>\n    </>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/MetaComponents/App';\nimport { ThemeProvider } from 'emotion-theming';\nimport { theme } from './util/theme';\nimport * as serviceWorker from './serviceWorker';\nimport 'normalize.css';\n\nconst root = document.getElementById('root');\nconst app = (\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n);\nif (root!.hasChildNodes()) {\n  ReactDOM.hydrate(app, root);\n} else {\n  ReactDOM.render(app, root);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}