{"version":3,"sources":["util/cms.ts","hooks/usePrismjs.tsx","components/Blog/Post.tsx","util/theme.ts","components/RootComponents/HomePage.tsx","components/RootComponents/AboutPage.tsx","components/Navigation/Header.tsx","components/MetaComponents/Layout.tsx","components/RootComponents/ContactPage.tsx","components/MetaComponents/App.tsx","serviceWorker.ts","index.tsx"],"names":["ButterApi","butter","require","Post","props","post","body","title","published","date","Date","bodyRef","React","useRef","target","plugins","useEffect","current","length","classList","add","Prismjs","highlightAllUnder","usePrismjs","toLocaleString","undefined","year","month","day","hour","hour12","minute","ref","dangerouslySetInnerHTML","__html","theme","color","primary","accent","text","space","xxs","xs","s","sm","m","l","xl","xxl","xxxl","typography","baseFontSize","baseLineHeight","headerFontFamily","bodyFontFamily","googleFonts","name","styles","postListStyle","css","HomePage","useState","posts","setPosts","a","list","response","data","fetch","map","p","AboutPage","headerStyles","Header","to","className","Layout","Helmet","contactStyle","ContactPage","src","globalStyles","App","path","element","Boolean","window","location","hostname","match","root","document","getElementById","app","StrictMode","hasChildNodes","ReactDOM","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eccde275.chunk.js","sourcesContent":["import butter from 'buttercms';\r\nimport { AxiosResponse } from 'axios';\r\nimport {\r\n  ButterListResponse,\r\n  BlogPost,\r\n  ButterRetrieveResponse\r\n} from '../types/cms';\r\n\r\nconst ButterApi = butter('9ffd3dad4fd54423ad22bc3ce3e1a2fd6bbc9081');\r\n\r\nexport function postList(): Promise<\r\n  AxiosResponse<ButterListResponse<BlogPost[]>>\r\n> {\r\n  return ButterApi.post.list() as Promise<\r\n    AxiosResponse<ButterListResponse<BlogPost[]>>\r\n  >;\r\n}\r\n\r\nexport function getPost(\r\n  slug: string\r\n): Promise<AxiosResponse<ButterRetrieveResponse>> {\r\n  return ButterApi.post.retrieve(slug) as Promise<\r\n    AxiosResponse<ButterRetrieveResponse>\r\n  >;\r\n}\r\n","import React from 'react';\r\nimport Prismjs from 'prismjs';\r\n\r\nimport '../util/prismjs-alloy.scss';\r\nimport 'prismjs/plugins/line-numbers/prism-line-numbers.css';\r\n\r\nrequire('prismjs/components/prism-typescript');\r\nrequire('prismjs/components/prism-jsx');\r\nrequire('prismjs/components/prism-tsx');\r\nrequire('prismjs/plugins/line-numbers/prism-line-numbers');\r\n\r\nexport function usePrismjs<T extends HTMLElement>(\r\n  target: React.RefObject<T>,\r\n  plugins: string[] = []\r\n) {\r\n  React.useEffect(() => {\r\n    if (target.current) {\r\n      if (plugins.length > 0) {\r\n        target.current.classList.add(...plugins);\r\n      }\r\n      Prismjs.highlightAllUnder(target.current);\r\n    }\r\n  }, [target, plugins]);\r\n}\r\n","import React from 'react';\r\nimport { BlogPost } from '../../types/cms';\r\nimport { usePrismjs } from '../../hooks/usePrismjs';\r\n\r\ninterface PostProps {\r\n  post: BlogPost;\r\n}\r\n\r\nexport const Post: React.FC<PostProps> = props => {\r\n  const { body, title, published } = props.post;\r\n  const date = new Date(published);\r\n  const bodyRef = React.useRef<HTMLDivElement>(null);\r\n  usePrismjs(bodyRef, ['line-numbers']);\r\n\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      <h4>\r\n        {date.toLocaleString(undefined, {\r\n          year: 'numeric',\r\n          month: 'long',\r\n          day: 'numeric',\r\n          hour: 'numeric',\r\n          hour12: true,\r\n          minute: 'numeric'\r\n        })}\r\n      </h4>\r\n      <div ref={bodyRef} dangerouslySetInnerHTML={{ __html: body }} />\r\n    </div>\r\n  );\r\n};\r\n","import { Theme } from '../types/theme';\r\n\r\nexport const theme: Theme = {\r\n  color: {\r\n    primary: '#377771',\r\n    accent: '#4CE0B3',\r\n    text: '#333'\r\n  },\r\n  space: {\r\n    xxs: '2px',\r\n    xs: '4px',\r\n    s: '8px',\r\n    sm: '12px',\r\n    m: '16px',\r\n    l: '24px',\r\n    xl: '32px',\r\n    xxl: '64px',\r\n    xxxl: '96px'\r\n  },\r\n  typography: {\r\n    baseFontSize: '18px',\r\n    baseLineHeight: 1.61,\r\n    headerFontFamily: 'Lato, sans-serif',\r\n    bodyFontFamily: 'Lato, sans-serif',\r\n    googleFonts: [\r\n      {\r\n        name: 'Lato',\r\n        styles: ['400', '700']\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\nexport default theme;\r\n","/** @jsx jsx */\r\nimport React from 'react';\r\nimport { postList } from '../../util/cms';\r\nimport { BlogPost } from '../../types/cms';\r\nimport { Post } from '../Blog/Post';\r\nimport { css, jsx } from '@emotion/core';\r\nimport theme from '../../util/theme';\r\n\r\nconst postListStyle = css`\r\n  max-width: 900px;\r\n  margin: ${theme.space.xl};\r\n`;\r\n\r\nexport const HomePage: React.FC = props => {\r\n  const [posts, setPosts] = React.useState<BlogPost[]>([]);\r\n\r\n  React.useEffect(() => {\r\n    const fetch = async () => {\r\n      const response = await postList();\r\n      setPosts(response.data.data);\r\n    };\r\n    fetch();\r\n  }, []);\r\n  return (\r\n    <div css={postListStyle}>\r\n      {posts.map(p => (\r\n        <Post post={p} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const AboutPage: React.FC = props => {\r\n  return <div>about me, duh</div>;\r\n};\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { theme } from '../../util/theme';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst { color, space } = theme;\r\n\r\nconst headerStyles = css`\r\n  background-color: ${color.primary};\r\n  color: white;\r\n  padding: ${space.m};\r\n  ul {\r\n    display: flex;\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    li {\r\n      display: block;\r\n      margin: 0 ${space.sm};\r\n      cursor: pointer;\r\n      &:first-child {\r\n        margin-left: 0;\r\n      }\r\n      &:last-child {\r\n        margin-right: 0;\r\n      }\r\n\r\n      &.spacer {\r\n        cursor: initial;\r\n        flex-grow: 1;\r\n      }\r\n      a {\r\n        text-decoration: none;\r\n        &,\r\n        &:active,\r\n        &:hover,\r\n        &:visited {\r\n          color: white;\r\n        }\r\n        &:hover {\r\n          text-decoration: underline;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Header: React.FC = props => {\r\n  return (\r\n    <header css={headerStyles}>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Nathan Smith</Link>\r\n        </li>\r\n        <li className=\"spacer\" />\r\n        <li>\r\n          <Link to=\"/about\">About</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/contact\">Contact</Link>\r\n        </li>\r\n      </ul>\r\n    </header>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Outlet } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Header } from '../Navigation/Header';\r\n\r\nexport const Layout: React.FC = props => {\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Nathan Smith</title>\r\n      </Helmet>\r\n      <Header />\r\n      <Outlet />\r\n    </div>\r\n  );\r\n};\r\n","/** @jsx jsx */\r\nimport React from 'react';\r\nimport { jsx, css } from '@emotion/core';\r\n\r\nconst contactStyle = css`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 550px;\r\n  height: 800px;\r\n\r\n  iframe {\r\n    border: 0;\r\n    width: 550px;\r\n    height: 800px;\r\n  }\r\n`;\r\n\r\nexport const ContactPage: React.FC = props => {\r\n  return (\r\n    <div css={contactStyle}>\r\n      <iframe\r\n        title=\"Contact Me\"\r\n        src=\"https://docs.google.com/forms/d/e/1FAIpQLScLKJVojwvtY0TpBPYfaUQEhKjQfa2iAZsitp3iRxkEoAYvmw/viewform?embedded=true\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Global, css } from '@emotion/core';\r\nimport { HomePage } from '../RootComponents/HomePage';\r\nimport { AboutPage } from '../RootComponents/AboutPage';\r\nimport { theme } from '../../util/theme';\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nimport { Layout } from './Layout';\r\nimport { ContactPage } from '../RootComponents/ContactPage';\r\n\r\nconst { color, typography } = theme;\r\nconst globalStyles = css`\r\n  html {\r\n    color: ${color.text};\r\n    font-family: ${typography.bodyFontFamily};\r\n    h1,\r\n    h2,\r\n    h3,\r\n    h4,\r\n    h5 {\r\n      font-family: ${typography.headerFontFamily};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const App: React.FC = props => {\r\n  return (\r\n    <>\r\n      <Global styles={globalStyles} />\r\n      <BrowserRouter>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Layout />}>\r\n            <Route path=\"/\" element={<HomePage />} />\r\n            <Route path=\"about\" element={<AboutPage />} />\r\n            <Route path=\"contact\" element={<ContactPage />} />\r\n          </Route>\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './components/MetaComponents/App';\r\nimport { ThemeProvider } from 'emotion-theming';\r\nimport { theme } from './util/theme';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'normalize.css';\r\n\r\nconst root = document.getElementById('root');\r\nconst app = (\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>\r\n);\r\nif (root!.hasChildNodes()) {\r\n  ReactDOM.hydrate(app, root);\r\n} else {\r\n  ReactDOM.render(app, root);\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}